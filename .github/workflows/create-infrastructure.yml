name: '🚀 Deploy Infrastructure'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  TF_VAR_environment: ${{ inputs.environment }}
  # Backend configuration
  ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

jobs:
  # ============================================================================
  # VALIDATION AND SECURITY CHECKS
  # ============================================================================
  validate:
    name: '🔍 Validate'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Terraform Format Check
      run: |
        cd infrastructure
        terraform fmt -check -diff -recursive
      continue-on-error: true

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd infrastructure
        terraform validate

    - name: Security Scan with tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        soft_fail: true

  # ============================================================================
  # INFRASTRUCTURE PLANNING
  # ============================================================================
  terraform-plan:
    name: '📋 Plan'
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/plugin-cache
          .terraform
        key: terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          terraform-${{ runner.os }}-

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init

    - name: Terraform Plan
      id: tf-plan
      run: |
        cd infrastructure
        echo "Running: terraform plan -detailed-exitcode -no-color -out tfplan -var-file=\"environments/${{ inputs.environment }}/terraform.tfvars\""
        
        set +e  # Disable exit on error temporarily
        terraform plan -detailed-exitcode -no-color -out tfplan \
          -var-file="environments/${{ inputs.environment }}/terraform.tfvars"
        exitcode=$?
        set -e  # Re-enable exit on error

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          exit 1
        fi

    - name: Publish Terraform Plan
      if: steps.tf-plan.outputs.exitcode == '2'
      run: |
        cd infrastructure
        # Create a temporary directory with just the files we need
        mkdir -p ../tfplan-artifacts
        
        # Copy plan file (required)
        if [ -f "tfplan" ]; then
          cp tfplan ../tfplan-artifacts/
        else
          exit 1
        fi
        
        # Copy lock file (optional but recommended)
        if [ -f ".terraform.lock.hcl" ]; then
          cp .terraform.lock.hcl ../tfplan-artifacts/
        fi
        
    - name: Upload Plan Artifacts
      if: steps.tf-plan.outputs.exitcode == '2'
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-${{ github.run_number }}
        path: tfplan-artifacts/
        retention-days: 30

  # ============================================================================
  # MANUAL APPROVAL
  # ============================================================================
  approve-deployment:
    name: '✋ Approve Deployment'
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: needs.terraform-plan.outputs.tfplanExitCode == '2'
    environment: ${{ inputs.environment }}-approval
      
    steps:
    - name: Manual Approval Checkpoint
      run: echo "Waiting for manual approval..."

  # ============================================================================
  # INFRASTRUCTURE DEPLOYMENT
  # ============================================================================
  terraform-apply:
    name: '🚀 Apply'
    if: needs.terraform-plan.outputs.tfplanExitCode == '2'
    runs-on: ubuntu-latest
    needs: [validate, terraform-plan, approve-deployment]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/plugin-cache
          .terraform
        key: terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          terraform-${{ runner.os }}-

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan-${{ github.run_number }}
        path: tfplan-artifacts/
        
    - name: Move Files to Infrastructure
      run: |
        # Move plan file (required)
        if [ -f "tfplan-artifacts/tfplan" ]; then
          mv tfplan-artifacts/tfplan infrastructure/
        else
          exit 1
        fi
        
        # Move lock file (optional)
        if [ -f "tfplan-artifacts/.terraform.lock.hcl" ]; then
          mv tfplan-artifacts/.terraform.lock.hcl infrastructure/
        fi
        
        rm -rf tfplan-artifacts

    - name: Verify Downloaded Files
      run: |
        cd infrastructure
        if [ ! -f "tfplan" ]; then
          exit 1
        fi

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init


    - name: Terraform Apply
      id: apply
      run: |
        cd infrastructure
        
        if [ ! -f "tfplan" ]; then
          exit 1
        fi
        
        terraform apply -auto-approve tfplan
        
        if [ $? -eq 0 ]; then
          echo "apply_success=true" >> $GITHUB_OUTPUT
        else
          echo "apply_success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Generate Outputs
      if: steps.apply.outputs.apply_success == 'true'
      id: outputs
      run: |
        cd infrastructure
        echo "rg_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
        echo "acr_name=$(terraform output -raw acr_name)" >> $GITHUB_OUTPUT
        echo "acr_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
        echo "acr_id=$(terraform output -raw acr_id)" >> $GITHUB_OUTPUT


    - name: Create GitHub Release
      if: steps.apply.outputs.apply_success == 'true' && inputs.environment == 'prod'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: deploy-${{ github.run_number }}
        release_name: Production Deployment ${{ github.run_number }}
        body: |
          ## 🚀 Production Infrastructure Deployment
          
          **ACR Name**: ${{ steps.outputs.outputs.acr_name }}
          **ACR Server**: ${{ steps.outputs.outputs.acr_server }}
          **Resource Group**: ${{ steps.outputs.outputs.rg_name }}
          
          Deployed on: $(date -u)
        draft: false
        prerelease: false