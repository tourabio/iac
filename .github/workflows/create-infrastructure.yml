name: 'üöÄ Deploy Infrastructure'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  TF_VAR_environment: ${{ inputs.environment }}

jobs:
  # ============================================================================
  # VALIDATION AND SECURITY CHECKS
  # ============================================================================
  validate:
    name: 'üîç Validate'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Terraform Format Check
      run: |
        cd infrastructure
        terraform fmt -check -diff -recursive
      continue-on-error: true

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd infrastructure
        terraform validate

    - name: Security Scan with tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        soft_fail: true

  # ============================================================================
  # INFRASTRUCTURE PLANNING
  # ============================================================================
  terraform-plan:
    name: 'üìã Plan'
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
      planSummary: ${{ steps.plan-summary.outputs.summary }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/plugin-cache
          .terraform
        key: terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          terraform-${{ runner.os }}-

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init
        echo "‚úÖ Terraform initialized successfully" >> $GITHUB_STEP_SUMMARY

    - name: Terraform Plan
      id: tf-plan
      run: |
        cd infrastructure
        echo "Running: terraform plan -detailed-exitcode -no-color -out tfplan -var-file=\"environments/${{ inputs.environment }}/terraform.tfvars\""
        
        set +e  # Disable exit on error temporarily
        terraform plan -detailed-exitcode -no-color -out tfplan \
          -var-file="environments/${{ inputs.environment }}/terraform.tfvars"
        exitcode=$?
        set -e  # Re-enable exit on error

        echo "Raw exit code: $exitcode"
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        echo "üìä Plan Exit Code: $exitcode" >> $GITHUB_STEP_SUMMARY
        
        # Double-check by looking at the plan output
        if [ -f "tfplan" ]; then
          echo "üìã Plan file exists, checking contents..." >> $GITHUB_STEP_SUMMARY
          if terraform show -no-color tfplan | grep -E "(Plan:|No changes)" > /dev/null; then
            echo "üìÑ Plan summary:" >> $GITHUB_STEP_SUMMARY
            terraform show -no-color tfplan | head -5 >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        if [ $exitcode -eq 1 ]; then
          echo "‚ùå Terraform Plan Failed!" >> $GITHUB_STEP_SUMMARY
          exit 1
        elif [ $exitcode -eq 2 ]; then
          echo "üìù Changes detected in plan (exit code 2)" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚úÖ No changes detected (exit code 0)" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Generate Plan Summary
      id: plan-summary
      if: steps.tf-plan.outputs.exitcode == 2
      run: |
        SUMMARY=$(terraform show -no-color tfplan | head -50)
        echo "summary<<EOF" >> $GITHUB_OUTPUT
        echo "$SUMMARY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Publish Terraform Plan
      if: steps.tf-plan.outputs.exitcode == 2
      run: |
        cd infrastructure
        # Create a temporary directory with just the files we need
        mkdir -p ../tfplan-artifacts
        
        # Copy plan file (required)
        if [ -f "tfplan" ]; then
          cp tfplan ../tfplan-artifacts/
          echo "‚úÖ Plan file copied"
        else
          echo "‚ùå Plan file missing!"
          exit 1
        fi
        
        # Copy lock file (optional but recommended)
        if [ -f ".terraform.lock.hcl" ]; then
          cp .terraform.lock.hcl ../tfplan-artifacts/
          echo "‚úÖ Lock file copied"
        else
          echo "‚ö†Ô∏è Lock file not found, will skip"
        fi
        
        echo "üìÅ Artifacts directory contents:"
        ls -la ../tfplan-artifacts/
        
    - name: Upload Plan Artifacts
      if: steps.tf-plan.outputs.exitcode == 2
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-${{ github.run_number }}
        path: tfplan-artifacts/
        retention-days: 30

    - name: Show Plan Summary
      if: steps.tf-plan.outputs.exitcode == 2
      run: |
        echo "## üìã Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```terraform' >> $GITHUB_STEP_SUMMARY
        terraform show -no-color tfplan | head -100 >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Comment PR
      if: github.event_name == 'pull_request' && steps.tf-plan.outputs.exitcode == 2
      uses: actions/github-script@v6
      with:
        script: |
          const plan = `${{ steps.plan-summary.outputs.summary }}`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üìã Terraform Plan\n\`\`\`terraform\n${plan}\n\`\`\``
          });

  # ============================================================================
  # MANUAL APPROVAL
  # ============================================================================
  approve-deployment:
    name: '‚úã Approve Deployment'
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: needs.terraform-plan.outputs.tfplanExitCode == 2
    environment: 
      name: manual-approval-${{ inputs.environment }}
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      
    steps:
    - name: Wait for Manual Approval
      run: |
        echo "## ‚úã Manual Approval Required" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Requested by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow Run**: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üîç **Review Required:**" >> $GITHUB_STEP_SUMMARY
        echo "1. Review the Terraform plan in the previous step" >> $GITHUB_STEP_SUMMARY
        echo "2. Verify the changes match your expectations" >> $GITHUB_STEP_SUMMARY
        echo "3. Click 'Review deployments' button to approve/reject" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚ö†Ô∏è **Important**: This step will wait indefinitely until manually approved or rejected." >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Approved**: Infrastructure changes will be applied" >> $GITHUB_STEP_SUMMARY
        echo "‚ùå **Rejected**: Workflow will be cancelled" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # INFRASTRUCTURE DEPLOYMENT
  # ============================================================================
  terraform-apply:
    name: 'üöÄ Apply'
    if: needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: production
    needs: [validate, terraform-plan, approve-deployment]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/plugin-cache
          .terraform
        key: terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          terraform-${{ runner.os }}-

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan-${{ github.run_number }}
        path: tfplan-artifacts/
        
    - name: Move Files to Infrastructure
      run: |
        echo "üìÅ Downloaded artifacts:"
        ls -la tfplan-artifacts/
        
        # Move plan file (required)
        if [ -f "tfplan-artifacts/tfplan" ]; then
          mv tfplan-artifacts/tfplan infrastructure/
          echo "‚úÖ Plan file moved to infrastructure/"
        else
          echo "‚ùå Plan file missing in artifacts!"
          exit 1
        fi
        
        # Move lock file (optional)
        if [ -f "tfplan-artifacts/.terraform.lock.hcl" ]; then
          mv tfplan-artifacts/.terraform.lock.hcl infrastructure/
          echo "‚úÖ Lock file moved to infrastructure/"
        else
          echo "‚ö†Ô∏è Lock file not found in artifacts, continuing without it"
        fi
        
        rm -rf tfplan-artifacts

    - name: Verify Downloaded Files
      run: |
        echo "üìÅ Infrastructure directory after download:"
        ls -la infrastructure/
        
        cd infrastructure
        if [ -f "tfplan" ]; then
          echo "‚úÖ Plan file ready for apply"
          echo "üìä Plan file info:"
          file tfplan
          ls -la tfplan
        else
          echo "‚ùå Plan file still missing after move!"
          echo "üîç Current directory contents:"
          ls -la
          exit 1
        fi

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init

    - name: Verify Plan Before Apply
      run: |
        echo "## üîç Verifying Plan Before Apply" >> $GITHUB_STEP_SUMMARY
        cd infrastructure && terraform show -no-color tfplan | head -20 >> $GITHUB_STEP_SUMMARY

    - name: Terraform Apply
      id: apply
      run: |
        echo "Starting infrastructure deployment..."
        cd infrastructure
        
        echo "üîç Current directory: $(pwd)"
        echo "üìÅ Files in current directory:"
        ls -la
        
        if [ ! -f "tfplan" ]; then
          echo "‚ùå ERROR: tfplan file is missing!"
          echo "üîç Searching for tfplan in entire workspace:"
          find /home/runner/work -name "tfplan" -type f 2>/dev/null || echo "No tfplan found anywhere"
          exit 1
        fi
        
        echo "‚úÖ tfplan file found, proceeding with apply..."
        terraform apply -auto-approve tfplan
        
        if [ $? -eq 0 ]; then
          echo "apply_success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Apply completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "apply_success=false" >> $GITHUB_OUTPUT
          echo "‚ùå Apply failed" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Generate Outputs
      if: steps.apply.outputs.apply_success == 'true'
      id: outputs
      run: |
        cd infrastructure
        echo "rg_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
        echo "acr_name=$(terraform output -raw acr_name)" >> $GITHUB_OUTPUT
        echo "acr_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
        echo "acr_id=$(terraform output -raw acr_id)" >> $GITHUB_OUTPUT

    - name: Show Deployment Summary
      if: steps.apply.outputs.apply_success == 'true'
      run: |
        echo "## üöÄ Infrastructure Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Resources Created:" >> $GITHUB_STEP_SUMMARY
        echo "- **Resource Group**: ${{ steps.outputs.outputs.rg_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ACR Name**: ${{ steps.outputs.outputs.acr_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ACR Login Server**: ${{ steps.outputs.outputs.acr_server }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ACR Resource ID**: ${{ steps.outputs.outputs.acr_id }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Configure container image builds" >> $GITHUB_STEP_SUMMARY
        echo "- Set up deployment pipelines" >> $GITHUB_STEP_SUMMARY
        echo "- Configure access policies if needed" >> $GITHUB_STEP_SUMMARY

    - name: Create GitHub Release
      if: steps.apply.outputs.apply_success == 'true' && inputs.environment == 'prod'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: deploy-${{ github.run_number }}
        release_name: Production Deployment ${{ github.run_number }}
        body: |
          ## üöÄ Production Infrastructure Deployment
          
          **ACR Name**: ${{ steps.outputs.outputs.acr_name }}
          **ACR Server**: ${{ steps.outputs.outputs.acr_server }}
          **Resource Group**: ${{ steps.outputs.outputs.rg_name }}
          
          Deployed on: $(date -u)
        draft: false
        prerelease: false

  # ============================================================================
  # POST-DEPLOYMENT NOTIFICATIONS
  # ============================================================================
  notify:
    name: 'üì¨ Notify'
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    if: always()
    
    steps:
    - name: Deployment Status
      run: |
        if [ "${{ needs.terraform-apply.result }}" == "success" ]; then
          echo "## ‚úÖ Deployment Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "Infrastructure has been deployed to **${{ inputs.environment }}** environment." >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.terraform-apply.result }}" == "failure" ]; then
          echo "## ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs and retry the deployment." >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.terraform-apply.result }}" == "cancelled" ]; then
          echo "## ‚èπÔ∏è Deployment Cancelled" >> $GITHUB_STEP_SUMMARY
          echo "The deployment was cancelled by user." >> $GITHUB_STEP_SUMMARY
        fi