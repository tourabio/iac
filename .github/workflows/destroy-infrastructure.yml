name: '🗑️ Destroy Infrastructure'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  TF_VAR_environment: ${{ inputs.environment }}
  # Backend configuration
  ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

jobs:
  validate-destruction:
    name: '🔍 Validate Destruction'
    runs-on: ubuntu-latest
    
    steps:
    # Setup and Initialization
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init

    # Pre-Destruction Validation
    - name: List Resources Before Destruction
      run: |
        cd infrastructure
        
        # Get current resources and save for destruction summary
        if terraform show -json 2>/dev/null | jq -e '.values.root_module.resources' > /dev/null 2>&1; then
          # Save resource list for destruction summary
          terraform show -json | jq -r '.values.root_module.resources[]? | "- \(.type): \(.values.name // .values.id // "N/A")"' > /tmp/resources_before.txt 2>/dev/null || echo "- Unable to parse resources" > /tmp/resources_before.txt
          
          # Count resources
          RESOURCE_COUNT=$(terraform show -json 2>/dev/null | jq '.values.root_module.resources | length' 2>/dev/null || echo "0")
          echo "RESOURCES_TO_DESTROY=$RESOURCE_COUNT" >> $GITHUB_ENV
        else
          echo "RESOURCES_TO_DESTROY=0" >> $GITHUB_ENV
          echo "No resources to destroy" > /tmp/resources_before.txt
        fi

  # ============================================================================
  # MANUAL APPROVAL
  # ============================================================================
  approve-destruction:
    name: '⚠️ Approve Destruction'
    runs-on: ubuntu-latest
    needs: [validate-destruction]
    environment: ${{ inputs.environment }}-approval
      
    steps:
    - name: Destruction Approval Checkpoint
      run: echo "Waiting for destruction approval..."

  # ============================================================================
  # INFRASTRUCTURE DESTRUCTION
  # ============================================================================
  execute-destruction:
    name: '🗑️ Execute Destruction'
    runs-on: ubuntu-latest
    needs: [validate-destruction, approve-destruction]
    
    steps:
    # Setup and Initialization
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init

    # Infrastructure Destruction
    - name: Terraform Destroy
      run: |
        cd infrastructure
        terraform destroy -auto-approve \
          -var-file="environments/${{ inputs.environment }}/terraform.tfvars"

    # Post-Destruction Verification
    - name: Destruction Summary
      run: |
        cd infrastructure
        # Verify destruction
        REMAINING=$(terraform show -json 2>/dev/null | jq '.values.root_module.resources | length' 2>/dev/null || echo "0")
        
        if [ "$REMAINING" -ne "0" ]; then
          exit 1
        fi